import numpy as np
from collections import Counter

class KNNClassifier:
    def __init__(self, k=3):
        self.k = k
        self.X_train = None
        self.y_train = None

    def fit(self, X, y):
        """Almacena los datos de entrenamiento."""
        self.X_train = np.array(X)
        self.y_train = np.array(y)

    def predict(self, x):
        """Clasifica un nuevo punto x."""
        # Calculamos las distancias euclidianas
        distances = np.linalg.norm(self.X_train - x, axis=1)
        # Obtenemos los índices de los k vecinos más cercanos
        neighbors_idx = np.argsort(distances)[:self.k]
        # Obtenemos las clases de esos vecinos
        neighbor_labels = self.y_train[neighbors_idx]
        # Votación mayoritaria
        most_common = Counter(neighbor_labels).most_common(1)
        return most_common[0][0]

# Ejemplo de uso
if __name__ == "__main__":
    # Datos de entrenamiento en un espacio de 3 dimensiones
    X_train = [
        [1, 2, 3],
        [2, 3, 4],
        [10, 10, 10],
        [11, 11, 11],
        [5, 5, 1]
    ]
    y_train = ["A", "A", "B", "B", "C"]  # Clases

    # Entrenar clasificador
    knn = KNNClassifier(k=3)
    knn.fit(X_train, y_train)

    # Clasificar un nuevo punto
    x_new = np.array([2, 2, 3])
    prediction = knn.predict(x_new)
    print(f"El punto {x_new} pertenece a la clase: {prediction}")


